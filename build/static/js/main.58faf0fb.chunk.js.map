{"version":3,"sources":["serviceWorker.ts","constants/ImageTypes.ts","components/ImagesContext/ApiImagesContext.ts","components/CropImage/CropImageContext.ts","components/CropImage/CropImage.tsx","components/CropImage/CropImageContextProvider.tsx","api/axios.ts","constants/endpoints.ts","components/ImagesContext/ApiImagesContextProvider.tsx","components/ImageViewerModal/ImageViewerModalContext.tsx","components/ImageViewerModal/ImageViewerModal.tsx","components/ImageSizeInputFields/ImageSizeInputFields.tsx","components/ImagePerspective/ImagePerspective.tsx","components/WallpaperStyleSelectors/WallpaperStyleSelectors.tsx","components/App/App.tsx","db/fake-db/mock.js","db/fake-db/endpoints/getChildrenRooms.ts","db/fake-db/endpoints/getImages.ts","db/fake-db/index.js","index.tsx","assets/images/rooms/detskaya-komnata-1.png","assets/images/rooms/detskaya-komnata-2.png","assets/images/wallpapers/buildings_v1/building-01-orig.png","assets/images/wallpapers/buildings_v1/building-01-bw.png","assets/images/wallpapers/buildings_v1/building-01-sepia.png"],"names":["Boolean","window","location","hostname","match","IMAGE_TYPES","defaultValues","wallpaperImage","undefined","setWallpaperImage","isWallpaperImagesLoading","setIsWallpaperImagesLoading","roomImages","setRoomImages","isRoomImagesLoading","setIsRoomImagesLoading","ApiImagesContext","React","createContext","imageWidth","setImageWidth","imageHeight","setImageHeight","imageType","ORIGINAL","setImageType","cropperInstance","setCropperInstance","getCroppedImagedBase64String","CropImageContext","CropImage","useContext","cropJsImageRef","useRef","className","style","flexDirection","type","color","width","Typography","padding","ref","alt","maxWidth","src","original","onLoad","console","log","options","aspectRatio","preview","viewMode","cropper","Cropper","current","addEventListener","createAndSetCropperJsInstance","CropImageContextProvider","children","useState","Provider","value","croppedCanvas","getCroppedCanvas","imageSmoothingEnabled","imageSmoothingQuality","toDataURL","axiosInstance","axios","create","baseURL","process","timeout","headers","ENDPOINTS","ApiImagesContextProvider","useEffect","get","then","data","images","setImages","isModalVisible","setIsModalVisible","ImageViewerModalContext","ImageViewerModalProvider","ImageViewerModal","length","JSON","stringify","visible","onClose","ImageSizeInputFields","parseStringInteger","number","Number","parseInt","Grid","item","xs","TextField","label","onChange","event","target","setAspectRatio","margin","variant","height","STYLES","hiddenStyle","display","widthStyle","border","ImagePerspective","roomImage","setMergedImages","hasEndApplyingFilter","setHasEndApplyingFilter","canvasGLFX","setCanvasGLFX","updated","setUpdated","imageRef","createRef","resizeCanvas","canvas","glfx","e","alert","applyImageFilters","a","imageNode","texture","cropCoordinates","before","ax","ay","bx","by","cx","cy","dx","dy","after","draw","perspective","update","newImage","mergeImages","url","result","prevState","image","Image","ctx","getContext","resizedImage","onload","oc","document","createElement","octx","drawImage","WallpaperStyleSelectors","ButtonGroup","fullWidth","size","Button","onClick","SEPIA","replace","blackAndWhite","BLACK_WHITE","sepia","getData","scaleX","CroppedPreviewImage","justifyContent","paddingTop","WarningTextMessage","RowButtons","onCLickHandler","Paper","marginTop","component","container","direction","alignItems","id","aria-label","textTransform","App","mergedImages","isClicked","setIsClicked","isInProgress","setIsInProgress","active","spinner","text","map","Container","sm","md","justify","Divider","paddingBottom","mock","MockAdapter","delayResponse","rooms","childrenRoom1","childrenRoom2","onGet","reply","building","building01Orig","building01Bw","building01Sepia","onAny","passThrough","Providers","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.58faf0fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum IMAGE_TYPES {\n    ORIGINAL,\n    SEPIA,\n    BLACK_WHITE,\n}\n","import React, { Dispatch, SetStateAction } from \"react\";\n\nexport interface WallpaperImage {\n    original: string,\n    blackAndWhite: string,\n    sepia: string\n}\n\nexport interface RoomImage {\n    url: string,\n    width: number,\n    height: number,\n    cropCoordinates: {\n        ax: number,\n        ay: number,\n        bx: number,\n        by: number,\n        cx: number,\n        cy: number,\n        dx: number,\n        dy: number,\n    },\n}\n\ninterface ApiImagesContextProps {\n    // wallpaper images\n    wallpaperImage?: WallpaperImage,\n    setWallpaperImage: Dispatch<SetStateAction<WallpaperImage>>,\n    isWallpaperImagesLoading: boolean,\n    setIsWallpaperImagesLoading: Dispatch<SetStateAction<boolean>>\n\n    // room images\n    roomImages?: Array<RoomImage>,\n    setRoomImages: Dispatch<SetStateAction<Array<WallpaperImage>>>,\n    isRoomImagesLoading: boolean,\n    setIsRoomImagesLoading: Dispatch<SetStateAction<boolean>>\n}\n\nconst defaultValues = {\n    // wallpaper images\n    wallpaperImage: undefined,\n    setWallpaperImage: () => undefined,\n    isWallpaperImagesLoading: false,\n    setIsWallpaperImagesLoading: () => undefined,\n\n    // room images\n    roomImages: undefined,\n    setRoomImages: () => undefined,\n    isRoomImagesLoading: false,\n    setIsRoomImagesLoading: () => undefined,\n} as ApiImagesContextProps;\n\nexport const ApiImagesContext = React.createContext<ApiImagesContextProps>(defaultValues);\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { IMAGE_TYPES } from \"../../constants/ImageTypes\";\n\ninterface CropImageContextProps {\n    imageWidth: number,\n    setImageWidth: Dispatch<SetStateAction<number>>,\n    imageHeight: number,\n    setImageHeight: Dispatch<SetStateAction<number>>\n    imageType: IMAGE_TYPES,\n    setImageType: Dispatch<SetStateAction<IMAGE_TYPES>>\n    cropperInstance: any,\n    setCropperInstance: Dispatch<SetStateAction<any>>\n\n    /**\n     * Functions the returns base64 string image representation of the cropped image\n     */\n    getCroppedImagedBase64String: () => string | undefined\n}\n\nconst defaultValues = {\n    imageWidth: 600,\n    setImageWidth: () => undefined,\n    imageHeight: 400,\n    setImageHeight: () => undefined,\n    imageType: IMAGE_TYPES.ORIGINAL,\n    setImageType: ()=>undefined,\n    cropperInstance: 400,\n    setCropperInstance: () => undefined,\n    getCroppedImagedBase64String: () => undefined,\n} as CropImageContextProps;\n\nexport const CropImageContext = React.createContext<CropImageContextProps>(defaultValues);\n","import React, { useContext } from \"react\";\nimport Cropper from \"cropperjs\";\nimport Loader from 'react-loader-spinner';\n\nimport { ApiImagesContext } from \"../ImagesContext/ApiImagesContext\";\nimport { Typography } from \"@material-ui/core\";\nimport { CropImageContext } from \"./CropImageContext\";\n\n\nexport const CropImage = () => {\n    const {\n        wallpaperImage,\n        isWallpaperImagesLoading\n    } = useContext(ApiImagesContext);\n\n    const {\n        imageHeight,\n        imageWidth,\n        cropperInstance,\n        setCropperInstance\n    } = useContext(CropImageContext);\n\n    const cropJsImageRef = React.useRef<any>();\n\n    const createAndSetCropperJsInstance = (): void => {\n\n        if (imageHeight && imageWidth && cropJsImageRef) {\n            console.log('HELLOO')\n            const options = {\n                aspectRatio: imageWidth / imageHeight,\n                preview: '.img-preview',\n                viewMode: 3,\n\n            } as Cropper.Options;\n\n            const cropper = new Cropper(cropJsImageRef.current, options);\n\n            cropJsImageRef.current.addEventListener('cropend', () => {\n                // this.forceUpdate();\n            });\n\n            setCropperInstance(cropper)\n        }\n    };\n\n    if (isWallpaperImagesLoading) {\n        return (\n            (\n                <div\n                    className=\"flex justify-center items-center\"\n                    style={{flexDirection: 'column'}}\n                >\n                    <Loader\n                        type=\"Watch\"\n                        color=\"#00BFFF\"\n                        width={700}\n                    />\n                    <Typography>\n                        Loading image\n                    </Typography>\n                </div>\n            )\n        )\n    }\n\n    return (\n        <div style={{padding: '10px'}}>\n            <div>\n                <img\n                    ref={cropJsImageRef}\n                    alt=\"CroppedImage\"\n                    style={{maxWidth: '100%'}}\n                    src={wallpaperImage?.original}\n                    onLoad={() => {\n                        console.log('ON LOAD')\n                        if (!cropperInstance) {\n                            createAndSetCropperJsInstance();\n                        }\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from \"react\";\nimport { CropImageContext } from \"./CropImageContext\";\nimport { IMAGE_TYPES } from \"../../constants/ImageTypes\";\n\nexport const CropImageContextProvider: React.FC = ({children}) => {\n    const [imageType, setImageType] = useState<IMAGE_TYPES>(IMAGE_TYPES.ORIGINAL);\n\n    const [imageWidth, setImageWidth] = useState<number>(600);\n    const [imageHeight, setImageHeight] = useState<number>(400);\n\n    const [cropperInstance, setCropperInstance] = useState();\n\n    const getCroppedImagedBase64String = (): string | undefined => {\n        const croppedCanvas: HTMLCanvasElement = cropperInstance.getCroppedCanvas({\n            imageSmoothingEnabled: true,\n            imageSmoothingQuality: 'low',\n        });\n\n        if (croppedCanvas) {\n            return croppedCanvas.toDataURL('image/png');\n        } else {\n            return undefined;\n        }\n    };\n\n    return (\n        <CropImageContext.Provider value={{\n            imageType,\n            setImageType,\n            imageWidth,\n            setImageWidth,\n            imageHeight,\n            setImageHeight,\n            cropperInstance,\n            setCropperInstance,\n            getCroppedImagedBase64String,\n        }}>\n            {children}\n        </CropImageContext.Provider>\n    )\n}\n","import axios from 'axios';\n\nexport const axiosInstance = axios.create(\n    {\n        baseURL: process.env.REACT_APP_BASE_URL,\n        timeout: 10000,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }\n);\n","\n\nexport const ENDPOINTS = {\n    /*\n    Image that will be cropped by user\n    and merged after that with different room images\n     */\n    GET_IMAGE: '/image',\n    /*\n    Images of different children's rooms with perspective coordinates\n     */\n    GET_IMAGE_CHILDREN_ROOMS: '/image/rooms/children',\n}\n","import React, { useEffect, useState } from \"react\";\nimport { ApiImagesContext } from \"./ApiImagesContext\";\nimport { axiosInstance } from \"../../api/axios\";\nimport { ENDPOINTS } from \"../../constants/endpoints\";\n\nexport const ApiImagesContextProvider: React.FC = ({children}) => {\n\n    const [wallpaperImage, setWallpaperImage] = useState();\n    const [isWallpaperImagesLoading, setIsWallpaperImagesLoading] = useState(true);\n\n    const [roomImages, setRoomImages] = useState();\n    const [isRoomImagesLoading, setIsRoomImagesLoading] = useState(true);\n\n    const downloadImages = () => {\n        setIsWallpaperImagesLoading(true);\n        axiosInstance.get(ENDPOINTS.GET_IMAGE).then(({data})=>{\n\n            setWallpaperImage(data);\n            setIsWallpaperImagesLoading(false);\n        });\n\n        setIsRoomImagesLoading(true);\n        axiosInstance.get(ENDPOINTS.GET_IMAGE_CHILDREN_ROOMS).then(({data})=>{\n\n            setRoomImages(()=>{\n                console.log('setting', data)\n                return data;\n            });\n            setIsRoomImagesLoading(false)\n        })\n\n    };\n\n    useEffect(()=>{\n        downloadImages();\n    },[])\n\n    return (\n        <ApiImagesContext.Provider value={{\n            wallpaperImage,\n            setWallpaperImage,\n            isWallpaperImagesLoading,\n            setIsWallpaperImagesLoading,\n            roomImages,\n            setRoomImages,\n            isRoomImagesLoading,\n            setIsRoomImagesLoading,\n        }}>\n            {children}\n        </ApiImagesContext.Provider>\n    )\n}\n","import React, { Dispatch, SetStateAction, useState } from \"react\";\nimport { ImageDecorator } from \"react-viewer/lib/ViewerProps\";\n\ninterface ImageViewerContextProps {\n    images?: ImageDecorator[],\n    setImages: Dispatch<SetStateAction<ImageDecorator[]>>,\n    isModalVisible: boolean,\n    setIsModalVisible: Dispatch<SetStateAction<boolean>>,\n}\n\nconst defaultValues = {\n    images: undefined,\n    setImages: () => undefined,\n    isModalVisible: false,\n    setIsModalVisible: () => undefined\n} as ImageViewerContextProps;\n\nexport const ImageViewerModalContext = React.createContext<ImageViewerContextProps>(defaultValues);\n\nexport const ImageViewerModalProvider: React.FC = ({children}) => {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    /*\n        Images that will be shown in the modal window\n     */\n    const [images, setImages] = useState<ImageDecorator[]>([]);\n\n\n    return (\n        <ImageViewerModalContext.Provider value={{\n            images,\n            setImages,\n            isModalVisible,\n            setIsModalVisible,\n        }}>\n            {children}\n        </ImageViewerModalContext.Provider>\n    )\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport ImageView from 'react-viewer';\nimport { ImageViewerModalContext } from \"./ImageViewerModalContext\";\nimport { ApiImagesContext } from \"../ImagesContext/ApiImagesContext\";\n\nexport const ImageViewerModal: React.FC = () => {\n\n    const {images, setImages, isModalVisible, setIsModalVisible} = useContext(ImageViewerModalContext);\n    const {roomImages} = useContext(ApiImagesContext);\n\n    const onCloseHandler = () => {\n        setIsModalVisible(false);\n        setImages([]);\n    }\n\n    useEffect(() => {\n        if (images?.length === roomImages?.length) {\n            setIsModalVisible(true);\n        }\n    }, [images, isModalVisible, JSON.stringify(roomImages)]);\n\n    return (\n        <ImageView\n            visible={isModalVisible}\n            onClose={onCloseHandler}\n            images={images}\n        />\n    )\n}\n","import { Grid, TextField } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport { CropImageContext } from \"../CropImage\";\n\nexport const ImageSizeInputFields = () => {\n\n    const {\n        cropperInstance,\n        imageWidth,\n        setImageWidth,\n        imageHeight,\n        setImageHeight\n    } = useContext(CropImageContext);\n\n    const parseStringInteger = (number: string) => Number.parseInt(number, 10);\n\n    return (\n        <>\n            <Grid item={true} xs={6}>\n                <TextField\n                    label=\"Ширина, СМ\"\n                    type=\"number\"\n                    // className={classes.textField}\n                    value={imageWidth}\n                    onChange={((event) => {\n                        const width = parseStringInteger(event.target.value);\n                        cropperInstance.setAspectRatio(width / imageHeight);\n                        setImageWidth(width);\n                    })}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n            </Grid>\n            <Grid item={true} xs={6}>\n                <TextField\n                    label=\"Высота, СМ\"\n                    type=\"number\"\n                    // className={classes.textField}\n                    value={imageHeight}\n                    onChange={((event) => {\n                        const height = parseStringInteger(event.target.value);\n                        cropperInstance.setAspectRatio(imageWidth / height);\n                        setImageHeight(height);\n                    })}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n            </Grid>\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState } from 'react';\n// @ts-ignore\nimport glfx from 'glfx';\nimport mergeImages from 'merge-images';\nimport { ImageDecorator } from \"react-viewer/lib/ViewerProps\";\nimport { RoomImage } from \"../ImagesContext\";\nimport { ImageViewerModalContext } from \"../ImageViewerModal\";\nimport { CropImageContext } from \"../CropImage\";\n\nconst STYLES = {\n    hiddenStyle: {\n        display: 'none',\n    },\n    widthStyle: {\n        width: '100%',\n        border: '4px double black',\n        margin: '.5rem',\n    }\n};\n\nexport const ImagePerspective: React.FC<{ roomImage: RoomImage }> = ({roomImage}) => {\n\n    const {\n        setImages: setMergedImages,\n    } = useContext(ImageViewerModalContext);\n\n    const {getCroppedImagedBase64String} = useContext(CropImageContext)\n\n    const [hasEndApplyingFilter, setHasEndApplyingFilter] = useState();\n    const [canvasGLFX, setCanvasGLFX] = useState();\n    const [updated, setUpdated] = useState(false);\n\n    const imageRef = React.createRef<any>();\n    const resizeCanvas = React.createRef<any>();\n\n    useEffect(() => {\n        try {\n            const canvas = glfx.canvas();\n            setCanvasGLFX(canvas);\n        } catch (e) {\n            alert(e);\n        }\n    }, []);\n\n    const resizeImage = () => {\n        const image: HTMLImageElement = new Image();\n\n        const canvas = resizeCanvas.current;\n        const ctx = canvas.getContext('2d');\n\n        const resizedImage = imageRef.current;\n        const {width, height} = roomImage;\n\n        image.onload = function () {\n            // set size proportional to image\n            canvas.width = width;\n            canvas.height = height;\n\n            // step 1 - resize to 50%\n            const oc = document.createElement('canvas');\n            const octx: CanvasRenderingContext2D | null = oc.getContext('2d');\n\n            oc.width = width;\n            oc.height = height;\n            if (octx) {\n                octx.drawImage(image, 0, 0, oc.width, oc.height);\n                //\n                // // step 2\n                // octx.drawImage(oc, 0, 0, oc.width, oc.height);\n\n                // step 3, resize to final size\n                ctx.drawImage(oc, 0, 0, oc.width, oc.height,\n                    0, 0, canvas.width, canvas.height);\n\n                resizedImage.src = canvas.toDataURL('image/png');\n            }\n        };\n\n        image.src = getCroppedImagedBase64String() || '';\n    };\n\n    const applyImageFilters = async () => {\n        if (!updated) {\n            const {current: imageNode} = imageRef;\n\n            const texture = canvasGLFX.texture(imageNode);\n\n            const {width, height, cropCoordinates} = roomImage;\n\n            const before = [\n                0, // ax\n                0, // ay\n                width, // bx\n                0, // by\n                0, // cx\n                height, // cy\n                width, // dx\n                height, // dy\n            ];\n\n            const {\n                ax, ay, bx, by, cx, cy, dx, dy,\n            } = cropCoordinates;\n            const after = [\n                ax, // ax\n                ay, // ay\n                bx, // bx\n                by, // by\n                cx, // cx\n                cy, // cy\n                dx, // dx\n                dy, // dy\n            ];\n            canvasGLFX.draw(texture).perspective(before, after).update();\n\n            setUpdated(true);\n\n            const newImage = canvasGLFX.toDataURL('image/png');\n\n            const result = await mergeImages([newImage, roomImage.url]);\n\n            imageNode.src = result;\n            setMergedImages((prevState) => {\n\n                const value = {\n                    src: result,\n                    alt: 'Один из вариантов'\n                } as ImageDecorator;\n\n                if (prevState.length) {\n                    return [...prevState, value];\n\n                } else {\n                    return [value];\n                }\n            })\n\n\n        }\n        setHasEndApplyingFilter(true);\n    };\n\n    return (\n        <div style={{display: 'none'}}>\n            <canvas ref={resizeCanvas}/>\n            <img\n                ref={imageRef}\n                style={hasEndApplyingFilter ? STYLES.widthStyle : STYLES.hiddenStyle}\n                onLoad={applyImageFilters}\n            />\n            <img\n                className=\"hidden\"\n                style={{\n                    border: '4px double black',\n                    margin: '.5rem',\n                }}\n                src={getCroppedImagedBase64String()}\n                onLoad={resizeImage}\n            />\n        </div>\n    )\n};\n","import React, { useContext } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { IMAGE_TYPES } from \"../../constants/ImageTypes\";\nimport { ButtonGroup } from \"@material-ui/core\";\nimport { ApiImagesContext } from \"../ImagesContext\";\nimport { CropImageContext } from \"../CropImage\";\n\nexport const WallpaperStyleSelectors: React.FC = () => {\n\n    const {cropperInstance, imageType , setImageType} = useContext(CropImageContext);\n    const {wallpaperImage} = useContext(ApiImagesContext);\n\n    /**\n     * Action that will happen after \"Black and White\" button onClick event\n     */\n    const bwButtonOnClick = () => {\n        if (imageType === IMAGE_TYPES.ORIGINAL || imageType === IMAGE_TYPES.SEPIA) {\n            cropperInstance.replace(wallpaperImage?.blackAndWhite);\n\n            setImageType(IMAGE_TYPES.BLACK_WHITE);\n        } else {\n            cropperInstance.replace(wallpaperImage?.original);\n\n            setImageType(IMAGE_TYPES.ORIGINAL);\n        }\n    };\n\n    /**\n     * Action that will happen after \"Sepia\" button onClick event\n     */\n    const sepiaButtonOnClick = () => {\n        if (imageType === IMAGE_TYPES.ORIGINAL || imageType === IMAGE_TYPES.BLACK_WHITE) {\n            cropperInstance.replace(wallpaperImage?.sepia);\n\n            setImageType(IMAGE_TYPES.SEPIA);\n        } else {\n            cropperInstance.replace(wallpaperImage?.original);\n\n            setImageType(IMAGE_TYPES.ORIGINAL);\n        }\n    };\n\n    /**\n     * Action that will happen after \"Mirror\" button onClick event\n     */\n    const mirrorButtonOnClick = () => {\n        const imageData = cropperInstance.getData();\n        if (imageData.scaleX === 1) {\n            cropperInstance.scaleX(-1);\n        } else {\n            cropperInstance.scaleX(1);\n        }\n    };\n\n    return (\n        <>\n            <ButtonGroup\n                fullWidth={true}\n                color=\"primary\"\n                size=\"small\"\n            >\n                <Button\n                    color=\"default\"\n                    onClick={bwButtonOnClick}\n                >\n                    Ч/Б\n                </Button>\n                <Button\n                    color=\"default\"\n                    onClick={sepiaButtonOnClick}\n                >\n                    Сепия\n                </Button>\n                <Button\n                    color=\"default\"\n                    onClick={mirrorButtonOnClick}\n                >\n                    Отзеркалить\n                </Button>\n            </ButtonGroup>\n        </>\n    );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Container, Divider, Grid, Paper, Typography } from \"@material-ui/core\";\n\nimport { CropImage } from \"../CropImage\";\nimport { ApiImagesContext } from \"../ImagesContext\";\nimport { ImageViewerModalContext } from \"../ImageViewerModal\";\nimport { ImageSizeInputFields } from \"../ImageSizeInputFields\";\nimport { ImagePerspective } from \"../ImagePerspective/ImagePerspective\";\nimport { WallpaperStyleSelectors } from \"../WallpaperStyleSelectors/WallpaperStyleSelectors\";\nimport { CropImageContext } from \"../CropImage\";\n// @ts-ignore\nimport LoadingOverlay from 'react-loading-overlay';\n\nconst CroppedPreviewImage = () => {\n    return (\n        <div style={{display: 'flex', justifyContent: 'center', paddingTop: '10px'}}>\n            <div className=\"docs-preview clearfix\">\n                <div className=\"img-preview preview-lg\"/>\n            </div>\n        </div>\n    )\n}\n\nconst WarningTextMessage = () => {\n    return (\n        <div className=\"flex justify-center\">\n            <Typography>\n                <b>Внимание!</b>\n                Данное изображение по Вашему запросу может\n                быть изменено нашим дизайнером (цвет, пропорции и т.д.)\n            </Typography>\n        </div>\n    )\n}\n\nconst RowButtons: React.FC<{ onCLickHandler: () => void }> = ({onCLickHandler}) => {\n    return (\n        <Paper style={{marginTop: '.5rem'}}>\n            <Typography variant=\"h5\" color=\"textPrimary\" component=\"p\">\n                Посмотреть обрезанное изображение в интерьерах\n            </Typography>\n            <Grid container={true} direction=\"column\" alignItems=\"center\">\n                <ButtonGroup\n                    id=\"button group\"\n                    color=\"primary\"\n                    aria-label=\"small outlined primary button group\"\n                    style={{margin: '1rem'}}\n                    size=\"small\"\n                >\n                    <Button\n                        style={{textTransform: 'none'}}\n                        onClick={onCLickHandler}\n                    >\n                        Детская комната\n                    </Button>\n                    <Button style={{textTransform: 'none'}}>Открытая стена</Button>\n                    <Button style={{textTransform: 'none'}}>Стена с проемом</Button>\n                    <Button style={{textTransform: 'none'}}>Угловая стена</Button>\n                    <Button style={{textTransform: 'none'}}>За телевизором</Button>\n                    <Button style={{textTransform: 'none'}}>За диваном</Button>\n                    <Button style={{textTransform: 'none'}}>За кроватью</Button>\n                </ButtonGroup>\n            </Grid>\n        </Paper>\n    );\n}\n\nexport const App: React.FC = () => {\n\n    const {\n        roomImages,\n        isRoomImagesLoading,\n        isWallpaperImagesLoading\n    } = useContext(ApiImagesContext);\n\n    const {\n        images: mergedImages,\n        setIsModalVisible,\n    } = useContext(ImageViewerModalContext);\n    const {cropperInstance} = useContext(CropImageContext);\n\n    const [isClicked, setIsClicked] = useState<boolean>(false);\n    const [isInProgress, setIsInProgress] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (mergedImages?.length === roomImages?.length) {\n            setIsInProgress(false);\n            setIsModalVisible(true);\n            setIsClicked(false);\n        }\n    }, [mergedImages, roomImages , setIsInProgress, setIsModalVisible, setIsClicked] );\n\n    return (\n        <LoadingOverlay\n            active={isWallpaperImagesLoading || isRoomImagesLoading || isInProgress}\n            spinner={true}\n            text={isRoomImagesLoading ? 'Loading images' : 'Processing images'}\n        >\n            {\n                cropperInstance && isClicked && roomImages?.map((image) => (\n                    <ImagePerspective\n                        roomImage={image}\n                    />\n                ))\n            }\n            <Container style={{padding: '10px'}}>\n                <Paper style={{padding: '10px'}}>\n                    <Grid container={true}>\n                        <Grid item={true} xs={12} sm={12} md={8} style={{padding: '10xp'}}>\n                            <CropImage/>\n                        </Grid>\n                        <Grid item={true} xs={12} sm={12} md={4}>\n                            <Grid container={true} justify=\"center\" alignItems=\"center\">\n                                <ImageSizeInputFields/>\n                                <Grid item={true} xs={12}>\n                                    <WallpaperStyleSelectors/>\n                                </Grid>\n                                <Grid item={true} xs={12} justify='center' alignItems=\"center\">\n                                    <CroppedPreviewImage/>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item={true} xs={12}>\n                            <Divider/>\n                        </Grid>\n                    </Grid>\n                    <Container style={{paddingBottom: '.5rem'}}>\n                        <WarningTextMessage/>\n                    </Container>\n                </Paper>\n                <RowButtons onCLickHandler={() => {\n                    setIsClicked(true);\n                    setIsInProgress(true);\n                }}/>\n            </Container>\n        </LoadingOverlay>\n\n    );\n}\n","import { axiosInstance } from '../../api/axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst mock = new MockAdapter(axiosInstance, { delayResponse: 1000 });\nexport default mock;\n","import mock from '../mock';\nimport { ENDPOINTS } from '../../../constants/endpoints';\n\n/*\n   Children rooms that will be merged with cropped image.\n */\nimport childrenRoom1 from '../../../assets/images/rooms/detskaya-komnata-1.png';\nimport childrenRoom2 from '../../../assets/images/rooms/detskaya-komnata-2.png';\n\nconst images = {\n    rooms: {\n        children: [\n            {\n                url: childrenRoom1,\n                width: 960,\n                height: 700,\n                cropCoordinates: {\n                    ax: 0,\n                    ay: 75,\n                    bx: 540,\n                    by: 125,\n                    cx: 0,\n                    cy: 439,\n                    dx: 540,\n                    dy: 429,\n                },\n            },\n            {\n                url: childrenRoom2,\n                width: 879,\n                height: 678,\n                cropCoordinates: {\n                    ax: 0,\n                    ay: 7,\n                    bx: 551,\n                    by: 147,\n                    cx: 0,\n                    cy: 594,\n                    dx: 551,\n                    dy: 462,\n                },\n            },\n        ],\n    },\n};\n\nmock.onGet(ENDPOINTS.GET_IMAGE_CHILDREN_ROOMS).reply(() => [200, images.rooms.children]);\n","import mock from '../mock';\nimport { ENDPOINTS } from '../../../constants/endpoints';\nimport { WallpaperImage } from \"../../../components/ImagesContext/ApiImagesContext\";\n\n// Three types of one image: original, blackAndWhite, and Sepia\nimport building01Orig from '../../../assets/images/wallpapers/buildings_v1/building-01-orig.png';\nimport building01Bw from '../../../assets/images/wallpapers/buildings_v1/building-01-bw.png';\nimport building01Sepia from '../../../assets/images/wallpapers/buildings_v1/building-01-sepia.png';\n\nconst images = {\n    building: {\n        original: building01Orig,\n        blackAndWhite: building01Bw,\n        sepia: building01Sepia,\n    } as WallpaperImage,\n};\n\nmock.onGet(ENDPOINTS.GET_IMAGE).reply(() => [200, images.building]);\n","import mock from './mock';\nimport './endpoints/getChildrenRooms';\nimport './endpoints/getImages';\n\nmock.onAny().passThrough();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n    App,\n    CropImageContextProvider,\n    ApiImagesContextProvider,\n    ImageViewerModalProvider,\n    ImageViewerModal\n} from \"./components\";\n\nimport './assets/styles/Cropper.scss'\nimport './assets/styles/css-reset.scss'\nimport './assets/styles/main.scss';\nimport 'cropperjs/dist/cropper.css';\n\n// This import will allow fake-db to work\nimport './db/fake-db';\n\nconst Providers: React.FC = ({children}) => {\n    return (\n        <ApiImagesContextProvider>\n            <CropImageContextProvider>\n                <ImageViewerModalProvider>\n                    {children}\n                    <ImageViewerModal/>\n                </ImageViewerModalProvider>\n            </CropImageContextProvider>\n        </ApiImagesContextProvider>\n    );\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <Providers>\n            <App/>\n        </Providers>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/detskaya-komnata-1.09cece57.png\";","module.exports = __webpack_public_path__ + \"static/media/detskaya-komnata-2.ddfbcda9.png\";","module.exports = __webpack_public_path__ + \"static/media/building-01-orig.973ed778.png\";","module.exports = __webpack_public_path__ + \"static/media/building-01-bw.9186d37a.png\";","module.exports = __webpack_public_path__ + \"static/media/building-01-sepia.95d280bc.png\";"],"sourceRoot":""}